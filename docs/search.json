[
  {
    "objectID": "lab-03.html",
    "href": "lab-03.html",
    "title": "Lab 3: COVID-19",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(flextable)\n\n\nAttaching package: 'flextable'\n\nThe following object is masked from 'package:purrr':\n\n    compose\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric"
  },
  {
    "objectID": "lab-03.html#library-codes",
    "href": "lab-03.html#library-codes",
    "title": "Lab 3: COVID-19",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(flextable)\n\n\nAttaching package: 'flextable'\n\nThe following object is masked from 'package:purrr':\n\n    compose\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric"
  },
  {
    "objectID": "lab-03.html#lab-questions",
    "href": "lab-03.html#lab-questions",
    "title": "Lab 3: COVID-19",
    "section": "Lab Questions",
    "text": "Lab Questions\n\nQuestion 1: Public Data\n\nAllowing for data to be accessible to the general public makes it a bit more believable that the facts generated from the data-set are true and unbias. When we put a cloak on information, it can make it hard to believe, as we humans prefer to see something to believe. Even if people do not have the experience or resources to create the data analysis themselves, they can at least look at the raw data and with proper documentation of how it’s structured, you can somewhat understand the document. Public data is, in my opinion, one of the bridging aspects to science and public trust.\n\nData-set import\n\n\n# Covid Data URL Input\nurl = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\"\ncovid = read_csv(url)\n\nRows: 2502832 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): county, state, fips\ndbl  (2): cases, deaths\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(covid, 5)\n\n# A tibble: 5 × 6\n  date       county    state      fips  cases deaths\n  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 2020-01-21 Snohomish Washington 53061     1      0\n2 2020-01-22 Snohomish Washington 53061     1      0\n3 2020-01-23 Snohomish Washington 53061     1      0\n4 2020-01-24 Cook      Illinois   17031     1      0\n5 2020-01-24 Snohomish Washington 53061     1      0\n\n# Covid Dataset only in Colorado\nCO_covid &lt;- covid |&gt;\n  filter(state == \"Colorado\")\n\n\nQuestion 2: Daily Summary\n\n\n# Creating Values\nmy.date &lt;- as.Date(\"2022-02-01\")\nmy.state &lt;- \"Colorado\"\n\nclass(my.date)\n\n[1] \"Date\"\n\nclass(my.state)\n\n[1] \"character\"\n\n\n\n# Creating Data Tables based on Cases/Deaths\nselected_data &lt;- CO_covid |&gt;\n  filter(state == my.state) |&gt;\n  group_by(county) |&gt;\n  mutate(new_cases = cases - lag(cases),\n         new_deaths = deaths - lag(deaths)) |&gt;\n  ungroup() |&gt;\n  filter(date == my.date) |&gt;\n  mutate(new_cases = replace_na(new_cases, 0))\n\n# Top 5 Counties with New Cases on 2022-02-01\nmost_new_cases &lt;- selected_data |&gt;\n  slice_max(new_cases, n = 5, with_ties = FALSE)\n\nprint(most_new_cases)\n\n# A tibble: 5 × 8\n  date       county    state    fips   cases deaths new_cases new_deaths\n  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 2022-02-01 El Paso   Colorado 08041 170673   1518       630          7\n2 2022-02-01 Arapahoe  Colorado 08005 144255   1172       401          0\n3 2022-02-01 Denver    Colorado 08031 159022   1194       389          9\n4 2022-02-01 Adams     Colorado 08001 126768   1224       326          2\n5 2022-02-01 Jefferson Colorado 08059 113240   1219       291          7\n\n# Top 5 Counties with the Most Total Cases on 2022-02-01\nmost_cases &lt;- selected_data |&gt;\n  group_by(county) |&gt;\n  mutate(cumulative_cases = sum(cases)) |&gt;\n  ungroup() |&gt;\n  arrange(-cumulative_cases) |&gt;\n  slice_max(cumulative_cases, n = 5) \n\nprint(most_cases)\n\n# A tibble: 5 × 9\n  date       county    state    fips   cases deaths new_cases new_deaths\n  &lt;date&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n1 2022-02-01 El Paso   Colorado 08041 170673   1518       630          7\n2 2022-02-01 Denver    Colorado 08031 159022   1194       389          9\n3 2022-02-01 Arapahoe  Colorado 08005 144255   1172       401          0\n4 2022-02-01 Adams     Colorado 08001 126768   1224       326          2\n5 2022-02-01 Jefferson Colorado 08059 113240   1219       291          7\n# ℹ 1 more variable: cumulative_cases &lt;dbl&gt;\n\nsafe_counties &lt;- selected_data |&gt;\n  filter(new_cases &lt; 100) |&gt;\n  arrange(-new_cases)\n\nprint(safe_counties)\n\n# A tibble: 53 × 8\n   date       county     state    fips  cases deaths new_cases new_deaths\n   &lt;date&gt;     &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;\n 1 2022-02-01 Crowley    Colorado 08025  2935     28        56          0\n 2 2022-02-01 Montrose   Colorado 08085  8509    151        52          0\n 3 2022-02-01 Fremont    Colorado 08043 13194    172        48          0\n 4 2022-02-01 Las Animas Colorado 08071  3183     38        38          0\n 5 2022-02-01 Alamosa    Colorado 08003  4122     58        33          0\n 6 2022-02-01 Garfield   Colorado 08045 13472     83        30         -1\n 7 2022-02-01 Logan      Colorado 08075  6402    104        25          0\n 8 2022-02-01 Bent       Colorado 08011  2199     46        22          0\n 9 2022-02-01 Chaffee    Colorado 08015  4035     40        22          0\n10 2022-02-01 Morgan     Colorado 08087  5251    130        22          0\n# ℹ 43 more rows\n\n\n\nThe counties that have the highest amount of cases and daily new cases are El Paso, Arapahoe, Denver, Adams, and Jefferson. With Arapahoe having a slightly smaller total amount of cases than Denver, but more daily cases on 2022-02-01. A list of safe counties is printed above, and there are 53 that have less than 100 new cases on this day.\n\n\nQuestion 3: Normalizing Data\n\n\n# Reading in the Census Population Data\npop_url &lt;- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'\npopulation_census = read_csv(pop_url)\n\nRows: 3195 Columns: 67\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SUMLEV, STATE, COUNTY, STNAME, CTYNAME\ndbl (62): REGION, DIVISION, ESTIMATESBASE2020, POPESTIMATE2020, POPESTIMATE2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(population_census, 5)\n\n# A tibble: 5 × 67\n  SUMLEV REGION DIVISION STATE COUNTY STNAME  CTYNAME        ESTIMATESBASE2020\n  &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;                      &lt;dbl&gt;\n1 040         3        6 01    000    Alabama Alabama                  5024294\n2 050         3        6 01    001    Alabama Autauga County             58809\n3 050         3        6 01    003    Alabama Baldwin County            231768\n4 050         3        6 01    005    Alabama Barbour County             25229\n5 050         3        6 01    007    Alabama Bibb County                22301\n# ℹ 59 more variables: POPESTIMATE2020 &lt;dbl&gt;, POPESTIMATE2021 &lt;dbl&gt;,\n#   POPESTIMATE2022 &lt;dbl&gt;, POPESTIMATE2023 &lt;dbl&gt;, NPOPCHG2020 &lt;dbl&gt;,\n#   NPOPCHG2021 &lt;dbl&gt;, NPOPCHG2022 &lt;dbl&gt;, NPOPCHG2023 &lt;dbl&gt;, BIRTHS2020 &lt;dbl&gt;,\n#   BIRTHS2021 &lt;dbl&gt;, BIRTHS2022 &lt;dbl&gt;, BIRTHS2023 &lt;dbl&gt;, DEATHS2020 &lt;dbl&gt;,\n#   DEATHS2021 &lt;dbl&gt;, DEATHS2022 &lt;dbl&gt;, DEATHS2023 &lt;dbl&gt;, NATURALCHG2020 &lt;dbl&gt;,\n#   NATURALCHG2021 &lt;dbl&gt;, NATURALCHG2022 &lt;dbl&gt;, NATURALCHG2023 &lt;dbl&gt;,\n#   INTERNATIONALMIG2020 &lt;dbl&gt;, INTERNATIONALMIG2021 &lt;dbl&gt;, …\n\n\n\n# Formalizing the Dataset & Preparing for Joining\npopulation_census &lt;- population_census |&gt;\n  filter(STNAME == my.state) |&gt;\n  mutate(fips = paste0(STATE, COUNTY)) |&gt;\n  select(fips, contains(\"NAME\", ignore.case = TRUE, vars = NULL) | contains(\"2021\", ignore.case = TRUE, vars = NULL))\n  \nhead(population_census)\n\n# A tibble: 6 × 19\n  fips  STNAME   CTYNAME       POPESTIMATE2021 NPOPCHG2021 BIRTHS2021 DEATHS2021\n  &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;                   &lt;dbl&gt;       &lt;dbl&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n1 08000 Colorado Colorado              5811596       26377      62137      46481\n2 08001 Colorado Adams County           523544        3044       6631       3869\n3 08003 Colorado Alamosa Coun…           16579         202        192        166\n4 08005 Colorado Arapahoe Cou…          656855        1583       7592       4703\n5 08007 Colorado Archuleta Co…           13806         382        119        126\n6 08009 Colorado Baca County              3490          10         35         72\n# ℹ 12 more variables: NATURALCHG2021 &lt;dbl&gt;, INTERNATIONALMIG2021 &lt;dbl&gt;,\n#   DOMESTICMIG2021 &lt;dbl&gt;, NETMIG2021 &lt;dbl&gt;, RESIDUAL2021 &lt;dbl&gt;,\n#   GQESTIMATES2021 &lt;dbl&gt;, RBIRTH2021 &lt;dbl&gt;, RDEATH2021 &lt;dbl&gt;,\n#   RNATURALCHG2021 &lt;dbl&gt;, RINTERNATIONALMIG2021 &lt;dbl&gt;, RDOMESTICMIG2021 &lt;dbl&gt;,\n#   RNETMIG2021 &lt;dbl&gt;\n\n\n\n3.2 The data has basically been filtered down to Colorado, and now can be matched with the ‘fips’ column from the covid data.\n\n\n# Finding the Population Range in 2021\nrange_population &lt;- range(population_census$POPESTIMATE2021)\n\nprint(range_population)\n\n[1]     741 5811596\n\n\n\n3.3 The range of the population is between 741 and 5,811,596.\n3.4 Joining the Data\n\n\n#Creating the 2022-02-1 Joined Dataset\ncombined_pop_covid &lt;- inner_join(selected_data, population_census, by = \"fips\")\n\n# Finding the per capita cases and per capita new cases\ncapita_cases &lt;- combined_pop_covid |&gt;\n  group_by(county) |&gt;\n  mutate(percapitacases = cases/POPESTIMATE2021,\n         percapitanewcases = new_cases/POPESTIMATE2021) |&gt;\n  select(county, fips, percapitacases, percapitanewcases) |&gt;\n  ungroup()\n\n# Displaying the counties with the highest per capita cases\nmost_capita_cases &lt;- capita_cases |&gt;\n  select(county, fips, percapitacases) |&gt;\n  slice_max(percapitacases, n = 5)\n\nprint(most_capita_cases)\n\n# A tibble: 5 × 3\n  county  fips  percapitacases\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 Crowley 08025          0.512\n2 Bent    08011          0.412\n3 Pitkin  08097          0.343\n4 Lincoln 08073          0.342\n5 Logan   08075          0.305\n\n# Displaying the countires with the highest new per capita cases\nmost_new_capita_cases &lt;- capita_cases |&gt;\n  select(county, fips, percapitanewcases) |&gt;\n  slice_max(percapitanewcases, n = 5)\n\nprint(most_new_capita_cases)\n\n# A tibble: 5 × 3\n  county     fips  percapitanewcases\n  &lt;chr&gt;      &lt;chr&gt;             &lt;dbl&gt;\n1 Crowley    08025           0.00976\n2 Bent       08011           0.00412\n3 Sedgwick   08115           0.00387\n4 Washington 08121           0.00288\n5 Las Animas 08071           0.00265\n\n\n\nQuestion 4: Rolling thresholds\n\n\n# Creating a date format\ncombined_pop_covid$date &lt;- as.Date(combined_pop_covid$date, format=\"%Y-%m-%d\")\n\n# Filtering out the date range\ntwoweekreport_covid &lt;- CO_covid |&gt;\n  filter(date &gt;= (my.date - 14) & date &lt; my.date)\n\ntwoweekreport_covid &lt;- twoweekreport_covid |&gt;\n  left_join(population_census, by = \"fips\")\n\ncounty_summary &lt;- twoweekreport_covid |&gt;\n  group_by(county) |&gt;\n  mutate(new_cases = cases - lag(cases),\n         new_deaths = deaths - lag(deaths)) |&gt;\n  summarise(total_cases_14d = sum(new_cases, na.rm = TRUE), countypopulation = first(POPESTIMATE2021)) |&gt;\n  mutate(cases_per_100k = (total_cases_14d / countypopulation) * 1000) |&gt;\n  arrange(-cases_per_100k) |&gt;\n  slice_max(cases_per_100k, n = 5)\n  \nprint(county_summary) \n\n# A tibble: 5 × 4\n  county  total_cases_14d countypopulation cases_per_100k\n  &lt;chr&gt;             &lt;dbl&gt;            &lt;dbl&gt;          &lt;dbl&gt;\n1 Lincoln             192             5473           35.1\n2 Alamosa             563            16579           34.0\n3 Mineral              29              929           31.2\n4 Conejos             234             7582           30.9\n5 Fremont            1477            49237           30.0\n\n\n\nThe top 5 counties include Lincoln, Alamosa, Mineral, Conejos, and Fremont.\n\n\nQuestion 5: Death Toll\n\n\n# Calculating the Death Toll Percentage\ndeath_toll &lt;- combined_pop_covid |&gt;\n  group_by(county) |&gt;\n  summarise(deathtollpercent = (deaths/DEATHS2021) * 100) |&gt;\n  ungroup() |&gt;\n  filter(deathtollpercent &gt; 20) |&gt;\n  arrange(deathtollpercent)\n\nprint(death_toll)\n\n# A tibble: 36 × 2\n   county     deathtollpercent\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Routt                  20.2\n 2 Huerfano               20.9\n 3 Douglas                21.2\n 4 Grand                  22  \n 5 Teller                 22.4\n 6 Jefferson              22.6\n 7 Broomfield             23.0\n 8 Denver                 23.2\n 9 Chaffee                23.3\n10 Dolores                23.3\n# ℹ 26 more rows\n\n# Plotting the data\nggplot(death_toll, aes(x = county, y = deathtollpercent)) +\n  geom_bar(stat = \"identity\", fill = \"indianred1\", color = \"indianred4\") +\n  labs(title = \"Death Toll Percentage in Colorado Counties\",\n       x = \"County\",\n       y = \"Death Toll Percentage\",\n       caption = \"Counties with death toll percentages over 20% in 2021\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nQuestion 6: Multi-state\n\n\n# Filtering the Data\nmultistate_covid &lt;- covid |&gt;\n  filter(state %in% c(\"New York\", \"Colorado\", \"Alabama\", \"Ohio\"))\n\nmultistate &lt;- multistate_covid |&gt;\n  group_by(state, date) |&gt;\n  summarise(daily_cases = sum(cases, na.rm = TRUE)) |&gt;\n  arrange(state, date) |&gt;\n  group_by(state) |&gt;\n  mutate(new_cases = daily_cases - lag(daily_cases)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\nmultistate &lt;- multistate |&gt;\n  group_by(state) |&gt;\n  mutate(new_cases_rollmean = rollmean(new_cases, k = 7, fill = NA, align = \"right\")) |&gt;\n  ungroup()\n\nprint(multistate)\n\n# A tibble: 3,192 × 5\n   state   date       daily_cases new_cases new_cases_rollmean\n   &lt;chr&gt;   &lt;date&gt;           &lt;dbl&gt;     &lt;dbl&gt;              &lt;dbl&gt;\n 1 Alabama 2020-03-13           6        NA               NA  \n 2 Alabama 2020-03-14          12         6               NA  \n 3 Alabama 2020-03-15          23        11               NA  \n 4 Alabama 2020-03-16          29         6               NA  \n 5 Alabama 2020-03-17          39        10               NA  \n 6 Alabama 2020-03-18          51        12               NA  \n 7 Alabama 2020-03-19          78        27               NA  \n 8 Alabama 2020-03-20         106        28               14.3\n 9 Alabama 2020-03-21         131        25               17  \n10 Alabama 2020-03-22         157        26               19.1\n# ℹ 3,182 more rows\n\n# Plotting the Data\nggplot(multistate, (aes(x = date))) +\n  geom_col(aes(y = new_cases), fill = \"indianred1\", col = NA) +\n  geom_line(aes(y = new_cases_rollmean, color = state)) +\n  facet_wrap(~ state, nrow = 2, scales = \"free_y\") +\n  labs(\n    title = \"New Covid Cases and Mean Rollout in CO, NY, AL, and OH\",\n    x = \"Date\",\n    y = \"Number of Cases\") +\n  theme_minimal() \n\nWarning: Removed 4 rows containing missing values or values outside the scale range\n(`geom_col()`).\n\n\nWarning: Removed 28 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\nPart two - Cases per capita of each state\n\n\n#Reading in a second population census to include new states\npop_url &lt;- 'https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv'\nmultistate_pop_census = read_csv(pop_url)\n\nRows: 3195 Columns: 67\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SUMLEV, STATE, COUNTY, STNAME, CTYNAME\ndbl (62): REGION, DIVISION, ESTIMATESBASE2020, POPESTIMATE2020, POPESTIMATE2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Summarizing the needed data\nmultistate_covid &lt;- multistate_covid |&gt;\n  group_by(state) |&gt;\n  mutate(new_cases = cases - lag(cases),\n         new_deaths = deaths - lag(deaths)) |&gt;\n  ungroup() |&gt;\n  group_by(state, date) |&gt;\n  summarise(daily_cases = sum(new_cases, na.rm = TRUE)) |&gt;\n  ungroup()\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\nmultistate_pop_census &lt;- multistate_pop_census |&gt;\n  select(STATE, COUNTY, contains(\"NAME\", ignore.case = TRUE, vars = NULL) | contains(\"2021\", ignore.case = TRUE, vars = NULL)) |&gt;\n  filter(STNAME %in% c(\"New York\", \"Colorado\", \"Alabama\", \"Ohio\"))\n\nmultistate_pop_census &lt;- multistate_pop_census |&gt;  \n  group_by(STNAME) |&gt;\n  summarise(total_population = sum(POPESTIMATE2021, na.rm = TRUE))\n\n# Joining the Data\nmultistate_pop_census &lt;- multistate_pop_census |&gt;\n  inner_join(multistate_covid, by = c(\"STNAME\" = \"state\")) |&gt;\n  group_by(STNAME) |&gt;\n  mutate(per_capita_cases = (daily_cases/total_population),\n         rollmean_capital = rollmean(per_capita_cases, k = 7, fill = NA, align = \"right\")) |&gt;\n  ungroup()\n\n#Plotting the Data\nggplot(multistate_pop_census, aes(x = date, y = rollmean_capital, col = STNAME, group = STNAME)) +\n  geom_line() +\n  labs(title = \"Rolling Average over 7 Days of Covid Cases in CO, AL, OH, and NY\",\n       x = \"Date\",\n       y = \"Cases\") +\n  theme_minimal()\n\nWarning: Removed 24 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\nThis analysis make it much easier to visualize the impact of covid, as you can directly compare the impact between the different states. Alabama looks as if it was heavily impacted during early 2022, which could be because of the lower total population then New York or Ohio. Although this could make the impact look much worst than it actually was. Overall I prefer this graph to the first.\n\n\nQuestion 7: Space and Time\n\n# Reading in the Data\nspacetimeurl &lt;- \"https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv\"\nspacetime_data = read_csv(spacetimeurl) \n\nRows: 3221 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): fips\ndbl (2): LON, LAT\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspacetime_data &lt;- spacetime_data |&gt;\n  inner_join(covid, by = \"fips\")\n\nspacetime_data$date &lt;- as.Date(spacetime_data$date, format=\"%Y-%m-%d\")\n\n#Calculating the weighted mean center \nspacetime_result &lt;- spacetime_data |&gt;\n  group_by(date) |&gt;\n  summarise(\n    X_coord = sum(LON * cases) / sum(cases),\n    Y_coord = sum(LAT * cases) / sum(cases),\n    total_cases = sum(cases)\n  )\n\n#Plotting the data\nggplot(spacetime_result, aes(x = X_coord, y = Y_coord)) +\n  borders(\"state\", fill = \"gray90\", colour = \"white\") +\n  geom_point(aes(x = X_coord, y = Y_coord, color = factor(month(date)), size = total_cases), alpha = 0.7) +\n  scale_size_continuous(range = c(2, 10)) +\n  scale_color_brewer(palette = \"Set3\") +\n  labs(title = \"Weighted Mean Center of COVID Cases\",\n       x = \"Longitude\", y = \"Latitude\",\n       color = \"Month\", size = \"Total Cases\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nIt seems as the middle of the county has the mean center of the COVID cases, which makes sense as the mean center will try to find the common area through the data. Since it is more concentrated on the eastern coast, it is mostly due to the large concentration of populations along the coast. It also seems like as the year goes on, it moves from west to east as well. As COVID started on the western coast due to travelers coming from China (Collins 2020), this would make sense that the trend started to move this way."
  }
]